class Solution
{
    public:
        vector<vector < int>> combinationSum2(vector<int> &candidates, int target)
        {
            vector<int> ds;
            int n = candidates.size();
            vector<vector < int>> ans;
            sort(candidates.begin(), candidates.end());
            int i = 0;
            f(n, i, ds, ans, candidates, target);
            return ans;
        }
    void f(int n, int i, vector<int> &ds, vector<vector< int >> &ans, vector< int > &candidates, int target)
    {
        if (i == n)
        {
            if (target == 0)
            {
                ans.push_back(ds);
                return;
            }
            return;
        }
        if (candidates[i] <= target)
        {
            ds.push_back(candidates[i]);
            f(n, i+1, ds, ans, candidates , target-candidates[i]);
             ds.pop_back();
        }
       
        while (i + 1 < n && candidates[i] == candidates[i + 1])
            i++;
        f(n, i + 1, ds, ans, candidates, target);
        
    }
};
